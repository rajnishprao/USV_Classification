"""
Generates spectrograms of ultrasonic vocalisations(USVs) from .wav files
"""

import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.colors import NoNorm
from scipy.io import wavfile
from scipy.signal import butter, sosfiltfilt, spectrogram, welch

# Load USVs for each recording session (.csv file) into dataframe
# Create new column containing details of each USV

df = pd.read_csv("calls_146001.csv")
df["call"] = (
    df["type_id"].astype(str)
    + "_"
    + df["Rec_id"].astype(str)
    + "_"
    + df["USV_id"].astype(str)
)

# Read .wav file for each channel
# Band pass filter (4th Order Butterworth) to remove low and high frequencies

fs, x = wavfile.read("ch1_T0000001.WAV")
sos = butter(4, (20000, 120000), btype="bandpass", output="sos", fs=fs)
x_filt = sosfiltfilt(sos, x)


def gen_spec(df):
    """
    Spectrogram generation:
    Power spectral density (PSD) computed for fixed window (100 ms)
    from onset of USV. If PSD > 0.4, spectrograms generated by Fast Fourier
    Transform and saved as .png files
    """
    rec_start = 1237074.7  # time stamp of recording session onset
    call_list = df["call"]
    time_list = df["Nlx_adjusted"]  # time stamps of USV onset
    for time, call in zip(time_list, call_list):
        spec_begin = (time - rec_start) * 250
        spec_end = spec_begin + 25000
        f, Pxx = welch(
            x_filt[int(spec_begin) : int(spec_end)],
            fs,
            window="blackmanharris",
            nperseg=500,
            noverlap=400,
            nfft=500,
        )
        if Pxx.max() > 0.4:
            f, t, Sxx = spectrogram(
                x_filt[int(spec_begin) : int(spec_end)],
                fs,
                nfft=500,
                noverlap=400,
                nperseg=500,
                window="blackmanharris",
            )
            plt.pcolormesh(t, f, Sxx, cmap="gray_r", norm=NoNorm())
            plt.axis(ymin=20000, ymax=120000)
            plt.axis("off")
            plt.savefig(
                f"./spectrograms/{call}_ch1.png", bbox_inches="tight", pad_inches=0
            )


gen_spec(df)
